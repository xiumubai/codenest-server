// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  phone     String?   @unique
  avatar    String
  password  String
  username  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  articles  Article[]
  comments  Comment[]
  likes     Like[]
}

model Article {
  id          Int      @id @default(autoincrement())
  title       String
  content     String   @db.Text
  description String
  cover       String
  tags        String    @db.Text
  isDraft     Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  viewCount   Int      @default(0)
  likeCount   Int      @default(0)
  commentCount Int      @default(0)
  author      User     @relation(fields: [authorId], references: [id])
  authorId    Int
  draftId     Int?     @unique
  draft       Article?  @relation("ArticleDraft", fields: [draftId], references: [id])
  originalArticle Article? @relation("ArticleDraft")
  comments    Comment[]
  likes       Like[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  article   Article  @relation(fields: [articleId], references: [id])
  articleId Int
  parentId  Int?
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  article   Article  @relation(fields: [articleId], references: [id])
  articleId Int

  @@unique([userId, articleId])
}
